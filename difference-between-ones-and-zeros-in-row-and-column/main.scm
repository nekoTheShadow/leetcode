(define (ones-minus-zeros grid)
    (define m (length grid))
    (define n (length (car grid)))
    (define a (make-vector m 0))
    (define b (make-vector n 0))
    (define v -1)

    (let loop1 ((i 0) (matrix grid))
        (if (< i m)
            (let loop2 ((j 0) (row (car matrix)))
                (vector-set! a i (+ (vector-ref a i) (car row)))
                (vector-set! b j (+ (vector-ref b j) (car row)))
                (if (< j (- n 1))
                    (loop2 (+ j 1) (cdr row))
                    (loop1 (+ i 1) (cdr matrix))
                )
            )
            'exit
        )
    )

    (let loop1 ((i 0) (matrix '()))
        (if (< i m)
            (let loop2 ((j 0) (row '()))
                (set! v (- (+ (vector-ref a i) (vector-ref b j)) (- m (vector-ref a i)) (- n (vector-ref b j))))
                (if (< j (- n 1))
                    (loop2 (+ j 1) (cons v row))
                    (loop1 (+ i 1) (cons (cons v row) matrix))
                )
            )
            (reverse (map reverse matrix))
        )
    )
  )
