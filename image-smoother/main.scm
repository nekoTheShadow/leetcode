(define (image-smoother img)
  (define A (list->vector (map list->vector img)))
  (define H (vector-length A))
  (define W (vector-length (vector-ref A 0)))
  (define B (make-vector H))
  (let loop ((i 0))
    (cond ((< i H) (vector-set! B i (make-vector W)) (loop (+ i 1)))))

  (let loop1 ((x 0))
    (if (< x H)
      (let loop2 ((y 0))
        (if (< y W)
          (begin 
            (vector-set! (vector-ref B x) y (avg A x y))
            (loop2 (+ y 1)))
          (loop1 (+ x 1))))
      (vector->list (vector-map vector->list B)))))

(define (avg A x y)
  (define H (vector-length A))
  (define W (vector-length (vector-ref A 0)))
  (let loop ((dx '(1 1  1 0 0  0 -1 -1 -1))
             (dy '(1 0 -1 1 0 -1  1  0 -1))
             (sum 0)
             (count 0))
    (if (null? dx)
      (floor (/ sum count))
      (let ((i (+ x (car dx))) (j (+ y (car dy))))
        (if (and (<= 0 i) (< i H) (<= 0 j) (< j W)) 
          (loop (cdr dx) (cdr dy) (+ sum (vector-ref (vector-ref A i) j)) (+ count 1))
          (loop (cdr dx) (cdr dy) sum count))))))
